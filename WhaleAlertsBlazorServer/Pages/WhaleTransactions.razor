@page "/whaletransactions"

@using MudBlazor;
@using WhaleAlertsLibrary.Controllers
@using WhaleAlertsLibrary.Models
@using System.Text.Json


<h3>WhaleTransactions</h3>

<MudButton ButtonType="ButtonType.Submit" OnClick="RefreshTransactions" >Testing</MudButton>

<table class="table table-striped table-hover">
	<thead>		
		<tr class="d-table-row">
			<td>Symbol</td>
			<td>Amount</td>
			<td>Amount_USD</td>
			<td>Blockchain</td>
			<td>From</td>	
			<td><span class="oi oi-arrow-right" aria-hidden="true"></span></td>
			<td>To</td>			
			<td>Timestamp</td>
		</tr>
	</thead>
	<tbody>
		@foreach(var transaction in transactionList.Transactions)
		{
			<tr class="d-sm-table-row">
					
				<td>@transaction.Symbol.ToUpper()</td>
				<td>@transaction.Amount</td>
				<td><span class="dollars">@transaction.Amount_USD</span></td>
				<td>@transaction.Blockchain</td>
				@if(@transaction.From.Owner_Type == "exchange")
				{
					<td>@transaction.From.Owner</td>
				}
				else
				{					
					<td>@transaction.From.Owner_Type</td>				
				}
				<td><span class="oi oi-arrow-right" aria-hidden="true"></span></td>
				
				@if (@transaction.To.Owner_Type == "exchange")
				{
					<td>@transaction.To.Owner</td>
				}
				else
				{
					<td>@transaction.To.Owner_Type</td>
				}
				
				<td>@GetDateTime(@transaction.Timestamp)</td>
			</tr>
		}
	</tbody>
</table>


@code {

	private string ApiKey = "BMEJgT0Gb3URK2b8pWAbu3cWN1x8jZpr";
	private string ApiUrl = "https://api.whale-alert.io/v1/transactions";
	private TransactionList transactionList { get; set; }
	

	protected override async Task OnInitializedAsync()
	{
		transactionList = await GetWhaleTransactions();
	}


	private async Task RefreshTransactions()
	{
		transactionList = await GetWhaleTransactions();			
	}


	public async Task<TransactionList> GetWhaleTransactions()
	{
		var httpClient = new HttpClient();

		httpClient.BaseAddress = new Uri(ApiUrl);
		var request = new System.Net.Http.HttpRequestMessage();
		request.Headers.Add("X-WA-API-KEY", ApiKey);
		//request.Headers.Add("Access-Control-Allow-Origin", "*");
		var response = httpClient.SendAsync(request);

		var json = new StreamReader(response.Result.Content.ReadAsStreamAsync().Result).BaseStream;


		return await JsonSerializer.DeserializeAsync<TransactionList>(json, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

		//var test = JsonConvert.DeserializeObject(json);            
	}


	public DateTime GetDateTime(int epoch) {
		DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(epoch);
		
		return dateTimeOffset.LocalDateTime;
	}
}
